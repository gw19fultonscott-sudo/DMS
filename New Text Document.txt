<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Daily Numeracy Challenges</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f4f8;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 1.5rem;
        }
        .container {
            width: 100%;
            max-width: 1000px;
        }
        .card {
            background-color: #ffffff;
            border-radius: 2rem;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
            padding: 2rem;
            text-align: center;
            animation: fadeIn 0.8s ease-out;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }
        .card-header {
            border-bottom: 2px solid #e2e8f0;
            padding-bottom: 1rem;
            margin-bottom: 1rem;
        }
        .message-box {
            position: absolute;
            top: 1rem;
            right: 1rem;
            padding: 0.5rem 1rem;
            border-radius: 9999px;
            font-weight: bold;
            display: none;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            animation: slideIn 0.5s ease-out;
            transform-origin: top right;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes slideIn {
            from { transform: scale(0.8) translateY(-20px); opacity: 0; }
            to { transform: scale(1) translateY(0); opacity: 1; }
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 24px;
            height: 24px;
            border-radius: 50%;
            border-left-color: #4a5568;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="selection:bg-indigo-300 selection:text-indigo-900">

    <div class="container flex flex-col items-center">
        <!-- Daily Message Box -->
        <div id="messageBox" class="message-box text-sm"></div>

        <h1 class="text-3xl sm:text-4xl font-bold text-gray-800 mb-2">Daily Numeracy Challenges</h1>
        
        <!-- Date Display -->
        <p id="dateDisplay" class="text-md text-indigo-600 mb-8"></p>

        <!-- Main Challenge Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 w-full">
            
            <!-- Section 1: Number -->
            <div id="section-arithmetic" class="card">
                <div class="card-header">
                    <h2 class="text-2xl font-bold text-gray-700">Number</h2>
                </div>
                <div class="flex-grow flex flex-col justify-center items-center p-4">
                    <p id="prompt-arithmetic" class="text-xl sm:text-2xl font-bold text-indigo-800 mb-6"></p>
                </div>
                <div class="flex flex-col items-center w-full">
                    <input type="number" id="answer-arithmetic" class="w-full px-4 py-3 rounded-xl border-2 border-gray-300 focus:outline-none focus:border-indigo-500 transition-colors duration-200 text-center mb-4 text-gray-800 text-lg shadow-sm" placeholder="Your answer">
                    <button onclick="checkAnswer('arithmetic')" class="w-full bg-indigo-600 text-white px-8 py-3 rounded-xl font-bold text-lg shadow-lg hover:bg-indigo-700 transition-all duration-200 transform hover:scale-105 active:scale-100">Check</button>
                    <button onclick="getHint('arithmetic')" class="w-full bg-gray-600 text-white px-8 py-3 mt-2 rounded-xl font-bold text-lg shadow-lg hover:bg-gray-700 transition-all duration-200 transform hover:scale-105 active:scale-100">Get a Hint ✨</button>
                </div>
                <div id="result-arithmetic" class="mt-4 text-center text-md font-semibold"></div>
                <div id="hint-arithmetic" class="mt-4 text-left text-sm text-gray-600 italic"></div>
            </div>

            <!-- Section 2: Fractions and Decimals -->
            <div id="section-fractions" class="card">
                <div class="card-header">
                    <h2 class="text-2xl font-bold text-gray-700">Fractions & Decimals</h2>
                </div>
                <div class="flex-grow flex flex-col justify-center items-center p-4">
                    <p id="prompt-fractions" class="text-xl sm:text-2xl font-bold text-indigo-800 mb-6"></p>
                </div>
                <div class="flex flex-col items-center w-full">
                    <input type="number" id="answer-fractions" class="w-full px-4 py-3 rounded-xl border-2 border-gray-300 focus:outline-none focus:border-indigo-500 transition-colors duration-200 text-center mb-4 text-gray-800 text-lg shadow-sm" placeholder="Your answer">
                    <button onclick="checkAnswer('fractions')" class="w-full bg-indigo-600 text-white px-8 py-3 rounded-xl font-bold text-lg shadow-lg hover:bg-indigo-700 transition-all duration-200 transform hover:scale-105 active:scale-100">Check</button>
                    <button onclick="getHint('fractions')" class="w-full bg-gray-600 text-white px-8 py-3 mt-2 rounded-xl font-bold text-lg shadow-lg hover:bg-gray-700 transition-all duration-200 transform hover:scale-105 active:scale-100">Get a Hint ✨</button>
                </div>
                <div id="result-fractions" class="mt-4 text-center text-md font-semibold"></div>
                <div id="hint-fractions" class="mt-4 text-left text-sm text-gray-600 italic"></div>
            </div>

            <!-- Section 3: Percentages -->
            <div id="section-percentages" class="card">
                <div class="card-header">
                    <h2 class="text-2xl font-bold text-gray-700">Percentages</h2>
                </div>
                <div class="flex-grow flex flex-col justify-center items-center p-4">
                    <p id="prompt-percentages" class="text-xl sm:text-2xl font-bold text-indigo-800 mb-6"></p>
                </div>
                <div class="flex flex-col items-center w-full">
                    <input type="number" id="answer-percentages" class="w-full px-4 py-3 rounded-xl border-2 border-gray-300 focus:outline-none focus:border-indigo-500 transition-colors duration-200 text-center mb-4 text-gray-800 text-lg shadow-sm" placeholder="Your answer">
                    <button onclick="checkAnswer('percentages')" class="w-full bg-indigo-600 text-white px-8 py-3 rounded-xl font-bold text-lg shadow-lg hover:bg-indigo-700 transition-all duration-200 transform hover:scale-105 active:scale-100">Check</button>
                    <button onclick="getHint('percentages')" class="w-full bg-gray-600 text-white px-8 py-3 mt-2 rounded-xl font-bold text-lg shadow-lg hover:bg-gray-700 transition-all duration-200 transform hover:scale-105 active:scale-100">Get a Hint ✨</button>
                </div>
                <div id="result-percentages" class="mt-4 text-center text-md font-semibold"></div>
                <div id="hint-percentages" class="mt-4 text-left text-sm text-gray-600 italic"></div>
            </div>

            <!-- Section 4: Shape -->
            <div id="section-geometry" class="card">
                <div class="card-header">
                    <h2 class="text-2xl font-bold text-gray-700">Shape</h2>
                </div>
                <div class="flex-grow flex flex-col justify-center items-center p-4">
                    <p id="prompt-geometry" class="text-xl sm:text-2xl font-bold text-indigo-800 mb-6"></p>
                </div>
                <div class="flex flex-col items-center w-full">
                    <input type="number" id="answer-geometry" class="w-full px-4 py-3 rounded-xl border-2 border-gray-300 focus:outline-none focus:border-indigo-500 transition-colors duration-200 text-center mb-4 text-gray-800 text-lg shadow-sm" placeholder="Your answer">
                    <button onclick="checkAnswer('geometry')" class="w-full bg-indigo-600 text-white px-8 py-3 rounded-xl font-bold text-lg shadow-lg hover:bg-indigo-700 transition-all duration-200 transform hover:scale-105 active:scale-100">Check</button>
                    <button onclick="getHint('geometry')" class="w-full bg-gray-600 text-white px-8 py-3 mt-2 rounded-xl font-bold text-lg shadow-lg hover:bg-gray-700 transition-all duration-200 transform hover:scale-105 active:scale-100">Get a Hint ✨</button>
                </div>
                <div id="result-geometry" class="mt-4 text-center text-md font-semibold"></div>
                <div id="hint-geometry" class="mt-4 text-left text-sm text-gray-600 italic"></div>
            </div>

        </div>
    </div>

    <script>
        /**
         * A simple seeded pseudo-random number generator (PRNG) to ensure the same question
         * is generated each day for consistency across devices.
         * @param {number} seed - The seed for the PRNG.
         */
        function seededRandom(seed) {
            let s = seed % 2147483647;
            if (s <= 0) s += 2147483646;
            return function() {
                s = (s * 16807) % 2147483647;
                return (s - 1) / 2147483646;
            };
        }

        /**
         * Retrieves the seed for the current day.
         * The seed is based on the day of the year, which ensures a new question every day.
         * @returns {number} The daily seed.
         */
        function getDailySeed() {
            const now = new Date();
            const start = new Date(now.getFullYear(), 0, 0);
            const diff = now - start;
            const oneDay = 1000 * 60 * 60 * 24;
            return Math.floor(diff / oneDay);
        }

        // Global object to store the current day's questions and answers
        const dailyChallenges = {};

        /**
         * Generates the questions for all four sections for the current day.
         */
        function generateAllDailyQuestions() {
            const seed = getDailySeed();
            const random = seededRandom(seed);

            // Number Challenge (formerly Arithmetic)
            dailyChallenges.arithmetic = (function() {
                const operators = ['+', '-', '×'];
                const operator = operators[Math.floor(random() * operators.length)];
                let num1 = Math.floor(random() * 100) + 1;
                let num2 = Math.floor(random() * 100) + 1;
                let answer;

                // Ensure non-negative answer for subtraction
                if (operator === '-' && num1 < num2) {
                    [num1, num2] = [num2, num1]; // Swap numbers
                }

                switch(operator) {
                    case '+': answer = num1 + num2; break;
                    case '-': answer = num1 - num2; break;
                    case '×': answer = num1 * num2; break;
                }
                return { prompt: `What is ${num1} ${operator} ${num2}?`, answer: answer };
            })();

            // Fractions & Decimals Challenge
            dailyChallenges.fractions = (function() {
                const questionType = Math.floor(random() * 3); // 3 different types of questions
                let prompt, answer;

                switch (questionType) {
                    case 0: // Simplify a fraction
                        const commonFactor = Math.floor(random() * 5) + 2; // Factor from 2 to 6
                        const num = Math.floor(random() * 5) + 1;
                        const den = Math.floor(random() * 5) + num + 1;
                        const unsimplifiedNum = num * commonFactor;
                        const unsimplifiedDen = den * commonFactor;
                        prompt = `Simplify the fraction ${unsimplifiedNum}/${unsimplifiedDen} (write your answer as a decimal).`;
                        answer = parseFloat((num / den).toFixed(2));
                        break;
                    case 1: // Find a fraction of an amount
                        const amount = (Math.floor(random() * 5) + 1) * 20; // Amounts like 20, 40, 60...
                        const fractionDen = [2, 4, 5, 10][Math.floor(random() * 4)];
                        const fractionNum = Math.floor(random() * (fractionDen - 1)) + 1;
                        prompt = `What is ${fractionNum}/${fractionDen} of ${amount}?`;
                        answer = (fractionNum / fractionDen) * amount;
                        break;
                    case 2: // Compare two fractions
                        const aNum = Math.floor(random() * 5) + 1;
                        const aDen = Math.floor(random() * 5) + aNum + 1;
                        const bNum = Math.floor(random() * 5) + 1;
                        const bDen = Math.floor(random() * 5) + bNum + 1;
                        const aDecimal = aNum / aDen;
                        const bDecimal = bNum / bDen;
                        const promptText = aDecimal > bDecimal 
                            ? `Which fraction is larger: ${aNum}/${aDen} or ${bNum}/${bDen}? (Enter the decimal value of the larger fraction, to 2 decimal places).`
                            : `Which fraction is larger: ${bNum}/${bDen} or ${aNum}/${aDen}? (Enter the decimal value of the larger fraction, to 2 decimal places).`;
                        prompt = promptText;
                        answer = parseFloat(Math.max(aDecimal, bDecimal).toFixed(2));
                        break;
                }
                return { prompt: prompt, answer: answer };
            })();
            
            // Percentages Challenge
            dailyChallenges.percentages = (function() {
                const perc = [10, 20, 25, 50, 75][Math.floor(random() * 5)];
                const total = Math.floor(random() * 10) * 10 + 20;
                return { prompt: `What is ${perc}% of ${total}?`, answer: (perc / 100) * total };
            })();

            // Geometry Challenge
            dailyChallenges.geometry = (function() {
                const width = Math.floor(random() * 10) + 3;
                const height = Math.floor(random() * 10) + 3;
                const questionType = Math.floor(random() * 2); // 0 for area, 1 for perimeter
                if (questionType === 0) {
                    return { prompt: `What is the area of a rectangle with sides of ${width} and ${height}?`, answer: width * height };
                } else {
                    return { prompt: `What is the perimeter of a rectangle with sides of ${width} and ${height}?`, answer: 2 * (width + height) };
                }
            })();
        }

        /**
         * Initializes the app by setting the date and generating the questions.
         */
        function initApp() {
            const dateDisplay = document.getElementById('dateDisplay');
            const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            dateDisplay.textContent = `Today is ${new Date().toLocaleDateString('en-US', options)}`;
            
            // Generate and display all questions
            generateAllDailyQuestions();
            document.getElementById('prompt-arithmetic').textContent = dailyChallenges.arithmetic.prompt;
            document.getElementById('prompt-fractions').textContent = dailyChallenges.fractions.prompt;
            document.getElementById('prompt-percentages').textContent = dailyChallenges.percentages.prompt;
            document.getElementById('prompt-geometry').textContent = dailyChallenges.geometry.prompt;
        }

        /**
         * Checks the user's answer for a specific section.
         * @param {string} sectionId - The ID of the section to check (e.g., 'arithmetic').
         */
        function checkAnswer(sectionId) {
            const userAnswer = document.getElementById(`answer-${sectionId}`).value;
            const resultElement = document.getElementById(`result-${sectionId}`);
            
            // Clear previous result
            resultElement.textContent = '';
            
            if (userAnswer === '') {
                resultElement.textContent = 'Please enter an answer.';
                resultElement.className = 'mt-4 text-center text-md font-semibold text-yellow-600';
                return;
            }

            const isCorrect = parseFloat(userAnswer) === dailyChallenges[sectionId].answer;

            if (isCorrect) {
                resultElement.textContent = 'Correct! ✅';
                resultElement.className = 'mt-4 text-center text-md font-semibold text-green-600';
            } else {
                resultElement.textContent = 'Incorrect ❌';
                resultElement.className = 'mt-4 text-center text-md font-semibold text-red-600';
            }
        }

        /**
         * Generates a hint for the current problem using the Gemini API.
         * @param {string} sectionId - The ID of the section to get a hint for.
         */
        async function getHint(sectionId) {
            const promptElement = document.getElementById(`prompt-${sectionId}`);
            const hintElement = document.getElementById(`hint-${sectionId}`);
            
            // Display loading indicator
            hintElement.innerHTML = `<span class="italic text-gray-400">Thinking...</span>`;

            const problem = promptElement.textContent;
            
            try {
                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: `You are a friendly and helpful math tutor. Give a hint for the following math problem, but do not give the answer. The problem is: "${problem}"` }] });
                
                const payload = { contents: chatHistory };
                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();
                
                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const hintText = result.candidates[0].content.parts[0].text;
                    hintElement.innerHTML = `<span class="italic text-gray-600">${hintText}</span>`;
                } else {
                    hintElement.textContent = 'Sorry, I couldn\'t generate a hint right now. Please try again.';
                    hintElement.className = 'mt-4 text-left text-sm text-red-600 italic';
                }

            } catch (error) {
                console.error('Error generating hint:', error);
                hintElement.textContent = 'An error occurred while getting the hint. Please try again.';
                hintElement.className = 'mt-4 text-left text-sm text-red-600 italic';
            }
        }

        window.onload = initApp;

    </script>
</body>
</html>
